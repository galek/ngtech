<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:forms="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
					xmlns:l="clr-namespace:Sce.Atf.Wpf"
                    xmlns:b="clr-namespace:Sce.Atf.Wpf.Behaviors"
					xmlns:m="clr-namespace:Sce.Atf.Wpf.Models"
                    xmlns:ct="clr-namespace:Sce.Atf.Wpf.Controls"
                    xmlns:c="clr-namespace:Sce.Atf.Wpf.ValueConverters">

    <!--Misc Styles *********************************************************************************** -->
    
    <Style x:Key="{x:Static l:Resources.AutoGreyStyleKey}" TargetType="FrameworkElement" >
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.33"/>
			</Trigger>
		</Style.Triggers>
	</Style>

    <Style x:Key="{x:Static l:Resources.DialogButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinWidth" Value="75"/>
        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="Margin" Value="6,0,0,0"/>
    </Style>
    
    <DataTemplate DataType="{x:Type forms:Control}">
        <ct:WindowsFormsHostEx BoundChild="{Binding}">
        </ct:WindowsFormsHostEx>
    </DataTemplate>

    <!--Toolbar Styles ******************************************************************************** -->
    
    <Style x:Key="{x:Static l:Resources.ToolBarButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Style.Setters>
            <Setter Property="ToolTip" Value="{Binding Description}"/>
            <Setter Property="Command" Value="{Binding}"/>
        </Style.Setters>
    </Style>

    <Style x:Key="{x:Static l:Resources.ToolBarStyleKey}" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="MinHeight" Value="16"/>
        <Setter Property="ItemsSource" Value="{Binding CommandsInSubtree}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button Style="{StaticResource {x:Static l:Resources.ToolBarButtonStyleKey}}">
                        <Image Width="16" Height="16" Source="{Binding ImageSourceKey, Converter={c:ResourceLookupConverter}}"
                               Style="{StaticResource {x:Static l:Resources.AutoGreyStyleKey}}"/>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility" Value="{Binding CommandsInSubtree, Converter={c:EnumerableCountToVisibilityConverter}}"/>
    </Style>

    <Style x:Key="{x:Static l:Resources.ToolBarTrayStyleKey}" TargetType="{x:Type ToolBarTray}" BasedOn="{StaticResource {x:Type ToolBarTray}}">
        <Setter Property="AllowDrop" Value="False"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <!--Menu Styles ******************************************************************************** -->

    <Style x:Key="{x:Static l:Resources.MenuItemImageStyleKey}" TargetType="{x:Type Image}" BasedOn="{StaticResource {x:Static l:Resources.AutoGreyStyleKey}}">
        <Setter Property="Width" Value="12"/>
        <Setter Property="Height" Value="12"/>
    </Style>

    <Style x:Key="{x:Static l:Resources.SubMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="Header" Value="{Binding Text}"/>
        <Setter Property="ItemsSource" Value="{Binding Children}"/>
        <Setter Property="Visibility" Value="{Binding CommandsInSubtree, Converter={c:EnumerableCountToVisibilityConverter}}"/>
    </Style>

    <Style x:Key="{x:Static l:Resources.CommandMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="Header" Value="{Binding Text}"/>
        <Setter Property="Command" Value="{Binding}"/>
        <Setter Property="IsChecked" Value="{Binding IsChecked}"/>
        <Setter Property="InputGestureText" Value="{Binding InputGestures, Converter={c:InputGestureTextConverter}}"/>
        <!--DAN: this is a workaround for a WPF bug (Fixed in .Net4)
                https://connect.microsoft.com/VisualStudio/feedback/details/497408/wpf-menuitem-icon-cannot-be-set-via-setter?wa=wsignin1.0-->
        <Setter Property="Icon" Value="{Binding ImageSourceKey, Converter={c:ImageResourceLookupConverter}}"/>
    </Style>

    <Style x:Key="{x:Static l:Resources.MenuSeparatorStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static l:Resources.MenuStyleKey}" TargetType="{x:Type MenuBase}">
        <Style.Resources>
            <c:MenuItemStyleSelector x:Key="styleSelector"/>
        </Style.Resources>
        <Style.Setters>
            <Setter Property="ItemContainerStyleSelector" Value="{StaticResource styleSelector}"/>
            <Setter Property="AllowDrop" Value="False"/>
        </Style.Setters>
    </Style>

    <!--StatusBar Styles ****************************************************************************** -->
    
    <DataTemplate DataType="{x:Type m:StatusText}">
        <TextBlock Text="{Binding Text}" 
                   Foreground="{Binding ForeColor}" 
                   ToolTip="{Binding ToolTip}"
                   MinWidth="{Binding MinWidth, Mode=OneTime}"/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type m:StatusImage}">
        <Image Source="{Binding ImageSourceKey, Converter={c:ResourceLookupConverter}}"
               Width="12" Height="12"/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type m:ProgressViewModel}">
        <ProgressBar 
            ToolTip="{Binding Description}"
            Height="16"
            VerticalAlignment="Center"
            Value="{Binding Progress, Mode=OneWay}"
            IsIndeterminate="{Binding IsIndeterminate}"
            Width="100"
            />
    </DataTemplate>

    <Style x:Key="{x:Static l:Resources.StatusBarItemStyleKey}" TargetType="{x:Type StatusBarItem}" BasedOn="{StaticResource {x:Type StatusBarItem}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsLeftDock, FallbackValue=False}" Value="False">
                <Setter Property="DockPanel.Dock" Value="Right"/>
                <Setter Property="HorizontalContentAlignment" Value="Right"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="{x:Null}">
                <Setter Property="Template" >
                    <Setter.Value>
                        <ControlTemplate>
                            <Separator Style="{StaticResource {x:Static StatusBar.SeparatorStyleKey}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

   <Style x:Key="{x:Static l:Resources.StatusBarStyleKey}" TargetType="{x:Type StatusBar}" BasedOn="{StaticResource {x:Type StatusBar}}">
        <Style.Setters>
            <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static l:Resources.StatusBarItemStyleKey}}"/>
            <Setter Property="AllowDrop" Value="False"/>
        </Style.Setters>
    </Style>

    <!-- TreeView Styles ****************************************************************************** -->

    <Style x:Key="{x:Static l:Resources.TreeViewItemExpanderStyleKey}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                        <Path Name="ExpandPath" Fill="Transparent" Stroke="#FF989898" Data="M0,0L0,6L6,0z">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF1BBBFA" />
                            <Setter TargetName="ExpandPath" Property="Fill" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FF595959" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF262626" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="{x:Static l:Resources.TreeViewStateImageStyleKey}" TargetType="{x:Type Image}" >
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="MaxWidth" Value="10"/>
        <Setter Property="MaxHeight" Value="10"/>
        <Setter Property="Margin" Value="0,0,-1,0"/>
    </Style>

    <Style x:Key="{x:Static l:Resources.TreeViewImageStyleKey}" TargetType="{x:Type Image}" >
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="MaxWidth" Value="16"/>
        <Setter Property="MaxHeight" Value="16"/>
        <Setter Property="Margin" Value="0,1,3,1"/>
    </Style>

    <Style x:Key="{x:Static l:Resources.TreeViewLabelTextBlockStyleKey}" TargetType="{x:Type TextBlock}" >
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="b:EditableTextBlockBehavior.IsInEditMode" Value="{Binding IsInLabelEditMode, Mode=TwoWay}"/>
    </Style>

    <Style x:Key="{x:Static l:Resources.TreeViewItemStyleKey}" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="IsExpanded" Value="{Binding Expanded, Mode=TwoWay}"/>
        <Setter Property="b:AtfTreeViewBehavior.IsMultiSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="b:StyleBehaviors.Behaviors">
            <Setter.Value>
                <b:StyleBehaviorCollection>
                    <b:TreeViewItemLabelEditBehavior />
                </b:StyleBehaviorCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style TargetType="{x:Type IFrameworkInputElement}">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="16" Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton Name="Expander" Style="{StaticResource {x:Static l:Resources.TreeViewItemExpanderStyleKey}}" ClickMode="Press" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter Name="ItemsHost" Grid.Row="1" Grid.Column="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="b:AtfTreeViewBehavior.IsMultiSelected" Value="True">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Background" />
                            <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="b:AtfTreeViewBehavior.IsMultiSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Property="Background" />
                            <Setter Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Property="Foreground" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <HierarchicalDataTemplate x:Key="{x:Static l:Resources.DefaultTreeViewItemTemplateKey}" ItemsSource="{Binding Children}">
        <StackPanel Orientation="Horizontal">
            <Image Style="{StaticResource {x:Static l:Resources.TreeViewStateImageStyleKey}}"
                        Source="{Binding StateImageKey, Converter={c:ResourceLookupConverter}}"/>
            <Image Style="{StaticResource {x:Static l:Resources.TreeViewImageStyleKey}}"
                        Source="{Binding ImageKey, Converter={c:ResourceLookupConverter}}"/>
            <TextBlock Style="{StaticResource {x:Static l:Resources.TreeViewLabelTextBlockStyleKey}}"
                       Text="{Binding Label, Mode=TwoWay}" />
        </StackPanel>
    </HierarchicalDataTemplate>

    <Style x:Key="{x:Static l:Resources.TreeViewStyleKey}" TargetType="TreeView">
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static l:Resources.TreeViewItemStyleKey}}" />
        <Setter Property="ItemsSource" Value="{Binding Roots}"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
        <Setter Property="ItemTemplate" Value="{DynamicResource {x:Static l:Resources.DefaultTreeViewItemTemplateKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="b:StyleBehaviors.Behaviors">
            <Setter.Value>
                <b:StyleBehaviorCollection>
                    <b:AtfTreeViewBehavior EnsureVisiblePath="{Binding EnsureVisiblePath}" SynchronisingSelection="{Binding InSelectionTransaction, Mode=OneWayToSource}"/>
                    <b:ContextMenuBehavior/>
                    <b:SelectionContextDragSourceBehavior/>
                    <b:ItemsControlDropTargetBehavior/>
                    <b:DragAutoScrollBehavior/>
                    <b:TreeViewDragHoverExpandBehavior />
                </b:StyleBehaviorCollection>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Palette DataTemplates ****************************************************************************** -->
    
    <!--Data template for PaletteItem -->
    <DataTemplate DataType="{x:Type m:NodeTypePaletteItem}">
        <StackPanel Orientation="Horizontal">
            <Image Source="{Binding ImageKey, Converter={c:ResourceLookupConverter}}" Height="16" Margin="2"/>
            <TextBlock Text="{Binding Name}" Margin="2"/>
            <ToolTipService.ToolTip>
                <ContentControl Content="{Binding Description}" />
            </ToolTipService.ToolTip>
        </StackPanel>
    </DataTemplate>

    <!--Data template for PaletteContent -->
    <DataTemplate DataType="{x:Type m:PaletteContent}">
        <ListBox ItemsSource="{Binding Data}" AllowDrop="False" HorizontalContentAlignment="Stretch">
            <ListBox.GroupStyle>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type GroupItem}">
                                        <Expander IsExpanded="True">
                                            <Expander.Header>
                                                <TextBlock FontWeight="Bold" Text="{Binding Path=Name}"/>
                                            </Expander.Header>
                                            <ItemsPresenter Margin="5,0,0,0" />
                                        </Expander>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </ListBox.GroupStyle>
            <i:Interaction.Behaviors>
                <b:ItemsControlDragSourceBehavior/>
            </i:Interaction.Behaviors>
        </ListBox>
    </DataTemplate>

    <!--RadioButtonList Style ****************************************************************************** -->

    <Style x:Key="{x:Static l:Resources.RadioButtonListStyleKey}" TargetType="{x:Type ListBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                        <StackPanel IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}" >
                    <Setter Property="Padding" Value="0,2,0,2" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border Background="Transparent" 
                                            BorderThickness="{TemplateBinding BorderThickness}" 
                                            Padding="{TemplateBinding Padding}" 
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            SnapsToDevicePixels="True">
                                    <RadioButton Focusable="False"
                                            IsHitTestVisible="False"
                                            IsChecked="{TemplateBinding IsSelected}">
                                        <ContentPresenter />
                                    </RadioButton>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>