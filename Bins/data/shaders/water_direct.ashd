[GLSL_VERTEX_SHADER]

uniform mat4 u_mvp;
uniform vec3 u_light_pos;
uniform vec3 u_view_pos;
uniform float u_inv_radius;

varying vec2 v_tex_coord;
varying vec3 v_light_vec;
varying vec3 v_view_vec;

void main() {
	gl_Position = u_mvp * gl_Vertex; 
	v_tex_coord = gl_MultiTexCoord0.xy;

    vec4 worldPos = gl_Vertex;

	vec3 lightVec = (u_light_pos - worldPos.xyz) * u_inv_radius;
	vec3 viewVec = u_view_pos - worldPos.xyz;
}



[GLSL_FRAGMENT_SHADER]

varying vec2 v_tex_coord;
varying vec3 v_light_vec;
varying vec3 v_view_vec;

uniform vec3 u_light_color;
uniform float u_time;
uniform float u_specular;
uniform float u_shininess;

uniform sampler2D u_bump_map;

void main() {

	float atten = 1.0;
	atten = clamp(1.0 - dot(v_light_vec, v_light_vec), 0.0, 1.0);

	vec3 lVec = normalize(v_light_vec);
	vec3 vVec = normalize(v_view_vec);
	
	vec3 normal = 2.0 * texture2D(u_bump_map, v_tex_coord * 20.0 + vec2(u_time, u_time) * 0.00005).xyz - 1.0;

	float specular = 0.0;
#ifdef SPECULAR
	specular = pow(clamp(dot(reflect(-vVec, normal), lVec), 0.0, 1.0), u_shininess) * u_specular;
#endif
	
	gl_FragColor = specular * atten * vec4(u_light_color, 1.0);
}
